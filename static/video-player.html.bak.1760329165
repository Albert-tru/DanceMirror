<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>视频对比播放器 - DanceMirror</title>
    <link rel="stylesheet" href="/static/css/common.css">
    <link rel="stylesheet" href="/static/css/video-player.css">
    <style>
        .compare-container { display:flex; gap:20px; margin:20px 0; align-items:flex-start; }
        .video-box { flex:1; display:flex; flex-direction:column; }
        .video-box h3 { margin:0 0 10px 0; padding:10px; background:linear-gradient(135deg,#667eea 0%,#764ba2 100%); color:#fff; border-radius:8px; text-align:center; }
        .video-box video { width:100%; background:#000; border-radius:8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
        .record-controls { margin-top:12px; display:flex; gap:8px; flex-wrap:wrap; align-items:center; }
        .record-timer { margin-left:8px; padding:6px 12px; background:#f0f0f0; border-radius:4px; font-family:monospace; font-size:14px; font-weight:bold; color:#e74c3c; }
        .sync-controls { background:#f8f9fa; padding:15px; border-radius:8px; margin:15px 0; }
        .offset-control { display:flex; gap:10px; align-items:center; margin-top:10px; }
        .offset-control label { font-weight:600; min-width:200px; }
        .offset-control input[type="range"] { flex:1; min-width:200px; }
        .offset-control input[type="number"] { width:80px; padding:5px; border:1px solid #ddd; border-radius:4px; text-align:center; }
        .master-controls { display:flex; gap:8px; flex-wrap:wrap; margin-bottom:10px; }
        @media (max-width:768px) { .compare-container { flex-direction:column; } }
        .recording-indicator { display:inline-block; width:10px; height:10px; background:#e74c3c; border-radius:50%; margin-right:5px; animation:blink 1s infinite; }
        @keyframes blink { 0%,50%{opacity:1}51%,100%{opacity:0.3} }
        .video-box video.mirrored { transform: scaleX(-1); }
        /* 模式切换 */
        .mode-switcher { text-align:center; margin:12px 0; }
        .mode-switcher .btn { margin:0 6px; }
        /* 裁剪面板 */
        .crop-panel { position:fixed; left:50%; top:50%; transform:translate(-50%,-50%); background:#fff; padding:16px; border-radius:8px; box-shadow:0 10px 30px rgba(0,0,0,0.2); z-index:10000; width:90%; max-width:900px; max-height:85vh; overflow:auto; }
        .crop-preview { position:relative; margin-top:12px; }
        #cropCanvas { width:100%; background:#000; border-radius:6px; display:block; }
        .preset-ratios { display:flex; gap:8px; flex-wrap:wrap; }
        .ratio-btn { padding:8px 12px; border:1px solid #ddd; background:#fff; border-radius:6px; cursor:pointer; }
        .ratio-btn.active { background:#007bff; color:#fff; border-color:#007bff; }
        .crop-actions { margin-top:12px; text-align:center; }
        .crop-close { position:absolute; right:12px; top:8px; cursor:pointer; font-weight:bold; }
        .hidden { display:none !important; }
    </style>
</head>
<body>
    <div class="container">
        <a href="/static/index.html" class="nav-link">← 返回首页</a>
        <h1>🎬 视频对比播放器（录制 & 裁剪 & 同步）</h1>
        <p class="subtitle">左侧观看原视频，右侧录制或加载本地视频进行对比。录制结束后可裁剪为常见比例（示例使用 Canvas，导出图片；可集成 ffmpeg.wasm 生成视频）。</p>
        <div class="message" id="message"></div>

        <div class="mode-switcher">
            <button id="singleModeBtn" class="btn btn-primary">📺 单视频模式</button>
            <button id="comparisonModeBtn" class="btn">🎬 同屏对照模式</button>
        </div>

        <div id="singleVideoContainer" class="video-container hidden">
            <h3>📺 单视频观看</h3>
            <video id="singleVideo" controls crossorigin="anonymous"></video>
            <div style="margin-top:8px;">
                <h4 id="singleVideoTitle"></h4>
                <p id="singleVideoDesc" style="color:#666;"></p>
            </div>
        </div>

        <div class="compare-container" id="comparisonContainer">
            <div class="video-box">
                <h3>📺 原视频（主控）</h3>
                <video id="originalVideo" controls crossorigin="anonymous"></video>
                <div class="video-info" style="margin-top:10px;">
                    <h4 id="videoTitle" style="margin:5px 0;">请选择视频</h4>
                    <p id="videoDescription" style="margin:5px 0; color:#666; font-size:13px;">暂无描述</p>
                </div>
            </div>

            <div class="video-box">
                <h3>🎥 你的录制 / 本地视频</h3>
                <video id="userVideo" controls muted></video>
                <div class="record-controls">
                    <button id="startRecBtn" class="btn btn-success">🔴 开始录制</button>
                    <button id="stopRecBtn" class="btn btn-secondary" disabled>⏹️ 停止录制</button>

                    <input id="localVideoInput" type="file" accept="video/*" class="hidden"/>
                    <button id="uploadLocalBtn" class="btn">📁 加载本地视频</button>

                    <button id="downloadRecBtn" class="btn" disabled>💾 下载</button>
                    <button id="uploadRecBtn" class="btn" disabled>☁️ 上传</button>
                    <span class="record-timer" id="recTimer">0:00</span>
                </div>
            </div>
        </div>

        <div class="sync-controls">
            <h3>🎛️ 同步控制</h3>
            <div class="master-controls">
                <button class="btn" id="masterPlay">▶️ 播放</button>
                <button class="btn" id="masterPause">⏸️ 暂停</button>
                <button class="btn" id="masterRestart">⏮️ 重新开始</button>
            </div>
            <div class="offset-control">
                <label>⏱️ 同步偏移（右侧视频延迟/提前秒数）：</label>
                <input id="offsetRange" type="range" min="-5" max="5" step="0.1" value="0" />
                <input id="offsetValue" type="number" step="0.1" value="0" />
                <span id="offsetLabel">0.0s</span>
            </div>
        </div>

        <div class="controls-panel">
            <div class="control-group">
                <h3>⏱️ 播放速度</h3>
                <div class="speed-buttons">
                    <button class="btn" data-speed="0.5">0.5x</button>
                    <button class="btn" data-speed="0.75">0.75x</button>
                    <button class="btn active" data-speed="1.0">1.0x</button>
                    <button class="btn" data-speed="1.25">1.25x</button>
                    <button class="btn" data-speed="1.5">1.5x</button>
                </div>
            </div>

            <div class="control-group" style="margin-top:12px;">
                <h3>🪞 镜面翻转</h3>
                <button class="btn" id="mirrorOriginal">翻转原视频</button>
                <button class="btn" id="mirrorUser">翻转录制视频</button>
            </div>

            <div class="control-group" style="margin-top:12px;">
                <h3>🔄 AB 循环（主控）</h3>
                <button class="btn btn-secondary" id="setA">设置 A 点</button>
                <button class="btn btn-secondary" id="setB">设置 B 点</button>
                <button class="btn btn-success" id="startLoop">开始循环</button>
                <button class="btn" id="clearLoop">清除循环</button>
                <div class="ab-loop-info" id="abInfo">A: 未设置 | B: 未设置</div>
            </div>
        </div>

        <h2>📹 视频列表</h2>
        <div class="video-list" id="videoList">
            <p style="text-align:center; color:#666;">加载中...</p>
        </div>
    </div>

    <!-- 裁剪面板（录制或本地视频加载后可打开） -->
    <div id="cropPanel" class="crop-panel hidden" aria-hidden="true">
        <div class="crop-close" id="cropClose">✖</div>
        <h3>🎬 裁剪已录制/本地视频</h3>
        <div class="preset-ratios" style="margin-top:8px;">
            <button class="ratio-btn active" data-ratio="16:9">16:9</button>
            <button class="ratio-btn" data-ratio="4:3">4:3</button>
            <button class="ratio-btn" data-ratio="1:1">1:1</button>
            <button class="ratio-btn" data-ratio="9:16">9:16</button>
            <button class="ratio-btn" data-ratio="custom">自定义</button>
        </div>
        <div class="crop-preview">
            <canvas id="cropCanvas" width="1280" height="720"></canvas>
            <div style="margin-top:8px; font-size:13px; color:#666;">提示：当前实现导出裁剪后的静态帧（PNG）。如需导出裁剪后的视频，可集成 ffmpeg.wasm。</div>
        </div>
        <div class="crop-actions">
            <button id="applyCropBtn" class="btn btn-success">✅ 应用裁剪并下载</button>
            <button id="cancelCropBtn" class="btn">取消</button>
        </div>
    </div>

    <script src="/static/js/utils.js"></script>
    <script src="/static/js/api.js"></script>
    <script>
        // elements
        const originalVideo = document.getElementById('originalVideo');
        const userVideo = document.getElementById('userVideo');
        const offsetRange = document.getElementById('offsetRange');
        const offsetValue = document.getElementById('offsetValue');
        const offsetLabel = document.getElementById('offsetLabel');
        const recTimer = document.getElementById('recTimer');

        let syncOffset = 0;
        let pointA = null, pointB = null;
        let currentVideoId = null;
        let mediaRecorder = null, recordedChunks = [], recordedBlob = null;
        let recStartTime = 0, recTimerInterval = null;

        // cropper state
        const cropPanel = document.getElementById('cropPanel');
        const cropCanvas = document.getElementById('cropCanvas');
        let activeCropper = null;

        // utils
        function showMessage(text, type='info', timeout=3000) { Utils.showMessage('message', text, type, timeout); }

        window.onload = function() {
            if (!DanceMirrorAPI.isLoggedIn()) {
                showMessage('请先登录，正在跳转...', 'error', 1500);
                setTimeout(()=>location.href='/static/index.html', 1500);
                return;
            }
            initSyncControls();
            initRecordingControls();
            initModeSwitcher();
            initLocalUpload();
            initMiscControls();
            loadVideos();
        };

        // ---------- sync controls ----------
        function initSyncControls(){
            offsetRange.addEventListener('input', (e)=>{ syncOffset = parseFloat(e.target.value); offsetValue.value = syncOffset; offsetLabel.textContent = syncOffset.toFixed(1)+'s'; });
            offsetValue.addEventListener('change', (e)=>{ syncOffset = parseFloat(e.target.value)||0; offsetRange.value = syncOffset; offsetLabel.textContent = syncOffset.toFixed(1)+'s'; });
            document.getElementById('masterPlay').addEventListener('click', ()=> originalVideo.play());
            document.getElementById('masterPause').addEventListener('click', ()=> originalVideo.pause());
            document.getElementById('masterRestart').addEventListener('click', ()=> { originalVideo.currentTime = 0; syncUserVideoTime(); });
            originalVideo.addEventListener('play', ()=> { try { if (userVideo.src) userVideo.play(); } catch(e){} });
            originalVideo.addEventListener('pause', ()=> { try{ userVideo.pause(); }catch(e){} });
            originalVideo.addEventListener('seeked', ()=> syncUserVideoTime());
            originalVideo.addEventListener('timeupdate', ()=> syncUserVideoTime());
        }

        function syncUserVideoTime(){
            if (!userVideo.src || userVideo.readyState < 2) return;
            const target = originalVideo.currentTime + syncOffset;
            const clamped = Math.max(0, Math.min(userVideo.duration || Infinity, target));
            if (Math.abs(userVideo.currentTime - clamped) > 0.2) {
                try { userVideo.currentTime = clamped; } catch(e){ console.log('sync err', e); }
            }
        }

        // ---------- recording controls ----------
        function initRecordingControls(){
            document.getElementById('startRecBtn').addEventListener('click', startRecording);
            document.getElementById('stopRecBtn').addEventListener('click', stopRecording);
            document.getElementById('downloadRecBtn').addEventListener('click', downloadRecording);
            document.getElementById('uploadRecBtn').addEventListener('click', uploadRecording);
        }

        async function startRecording(){
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ video:true, audio:true });
                recordedChunks = [];
                const options = { mimeType: 'video/webm;codecs=vp8,opus' };
                if (!MediaRecorder.isTypeSupported(options.mimeType)) options.mimeType = 'video/webm';
                mediaRecorder = new MediaRecorder(stream, options);
                mediaRecorder.ondataavailable = e => { if (e.data && e.data.size>0) recordedChunks.push(e.data); };
                mediaRecorder.onstop = () => {
                    stream.getTracks().forEach(t=>t.stop());
                    recordedBlob = new Blob(recordedChunks, { type: 'video/webm' });
                    const url = URL.createObjectURL(recordedBlob);
                    userVideo.srcObject = null;
                    userVideo.src = url;
                    userVideo.muted = false;
                    userVideo.load();
                    document.getElementById('downloadRecBtn').disabled = false;
                    document.getElementById('uploadRecBtn').disabled = false;
                    showMessage('录制完成，可播放、下载或上传', 'success', 3000);
                };
                mediaRecorder.start();
                recStartTime = Date.now();
                startRecordingTimer();
                userVideo.srcObject = stream;
                userVideo.muted = true;
                userVideo.play();
                document.getElementById('startRecBtn').disabled = true;
                document.getElementById('startRecBtn').innerHTML = '<span class="recording-indicator"></span> 录制中...';
                document.getElementById('stopRecBtn').disabled = false;
                showMessage('录制已开始', 'info', 1200);
            } catch (err) {
                showMessage('无法访问摄像头/麦克风: ' + (err.message||err), 'error', 4000);
                console.error(err);
            }
        }

        function stopRecording(){
            if (mediaRecorder && mediaRecorder.state !== 'inactive') mediaRecorder.stop();
            stopRecordingTimer();
            document.getElementById('startRecBtn').disabled = false;
            document.getElementById('startRecBtn').innerHTML = '🔴 开始录制';
            document.getElementById('stopRecBtn').disabled = true;
            // 打开裁剪面板（如果有录制文件或本地视频）
            setTimeout(()=> {
                if (recordedBlob || userVideo.src) openCropPanel();
            }, 200);
        }

        function startRecordingTimer(){
            recTimer.textContent = '0:00';
            recTimerInterval = setInterval(()=>{
                const elapsed = Math.floor((Date.now() - recStartTime)/1000);
                const mins = Math.floor(elapsed/60), secs = elapsed%60;
                recTimer.textContent = mins + ':' + String(secs).padStart(2,'0');
            }, 500);
        }
        function stopRecordingTimer(){ if (recTimerInterval) { clearInterval(recTimerInterval); recTimerInterval = null; } }

        function downloadRecording(){
            if (!recordedBlob) { showMessage('没有可下载的录制', 'error', 2000); return; }
            const url = URL.createObjectURL(recordedBlob);
            const a = document.createElement('a'); a.href = url; a.download = 'recording_' + Date.now() + '.webm'; document.body.appendChild(a); a.click(); a.remove();
            URL.revokeObjectURL(url);
            showMessage('下载已开始', 'success', 1500);
        }

        async function uploadRecording(){
            const file = recordedBlob instanceof File ? recordedBlob : (recordedBlob ? new File([recordedBlob], 'recording_' + Date.now() + '.webm', { type: recordedBlob.type }) : null);
            if (!file) { showMessage('没有可上传的录制', 'error', 2000); return; }
            try {
                showMessage('正在上传...', 'info');
                await DanceMirrorAPI.uploadVideo(file, { title: '录制_' + new Date().toLocaleString(), description: '用户录制视频' });
                showMessage('上传成功', 'success', 2000);
                setTimeout(()=> loadVideos(), 500);
            } catch (err) {
                console.error(err);
                showMessage('上传失败: ' + (err.message||err), 'error', 4000);
            }
        }

        // ---------- video list ----------
        async function loadVideos(){
            const listEl = document.getElementById('videoList');
            try {
                const videos = await DanceMirrorAPI.getVideos();
                if (videos && videos.length) {
                    listEl.innerHTML = '';
                    videos.forEach((video, idx) => {
                        const item = document.createElement('div'); item.className = 'video-item';
                        item.innerHTML = '<h4>' + Utils.escapeHtml(video.title) + '</h4><p>' + Utils.escapeHtml(video.description || '暂无描述') + '</p><p style="font-size:11px;color:#999;margin-top:6px;">' + Utils.formatDate(video.createdAt) + '</p>';
                        item.onclick = ()=> selectVideo(video, item);
                        listEl.appendChild(item);
                        if (idx===0) selectVideo(video, item);
                    });
                } else {
                    listEl.innerHTML = '<p style="text-align:center;color:#666;">暂无视频</p>';
                }
            } catch (err) {
                console.error(err);
                showMessage('加载失败: ' + (err.message||err), 'error');
                listEl.innerHTML = '<p style="text-align:center;color:#666;">加载失败</p>';
            }
        }

        function selectVideo(video, itemEl){
            currentVideoId = video.id;
            // video.filePath 可能是相对路径，确保以 / 开头
            originalVideo.src = (video.filePath && video.filePath.startsWith('/')) ? video.filePath : '/' + (video.filePath || '');
            originalVideo.load();
            document.getElementById('videoTitle').textContent = video.title || '未命名';
            document.getElementById('videoDescription').textContent = video.description || '暂无描述';
            document.querySelectorAll('.video-item').forEach(i=>i.classList.remove('active'));
            if (itemEl) itemEl.classList.add('active');
            clearABLoop();
        }

        // ---------- mode switcher ----------
        function initModeSwitcher(){
            const sm = document.getElementById('singleModeBtn'), cm = document.getElementById('comparisonModeBtn');
            const single = document.getElementById('singleVideoContainer'), compare = document.getElementById('comparisonContainer');
            sm.addEventListener('click', ()=> {
                single.classList.remove('hidden'); compare.classList.add('hidden');
                const svid = document.getElementById('singleVideo');
                if (originalVideo.src) { svid.src = originalVideo.src; svid.load(); document.getElementById('singleVideoTitle').textContent = document.getElementById('videoTitle').textContent; }
            });
            cm.addEventListener('click', ()=> { single.classList.add('hidden'); compare.classList.remove('hidden'); });
        }

        // ---------- local upload ----------
        function initLocalUpload(){
            const fileInput = document.getElementById('localVideoInput'), uploadBtn = document.getElementById('uploadLocalBtn');
            uploadBtn.addEventListener('click', ()=> fileInput.click());
            fileInput.addEventListener('change', (e)=> {
                const f = e.target.files && e.target.files[0];
                if (!f) return;
                if (!f.type.startsWith('video/')) { showMessage('请选择视频文件', 'error'); return; }
                if (f.size > 524288000) { showMessage('文件太大（>500MB）', 'error'); return; }
                recordedBlob = f; // reuse recordedBlob for upload/download/cropping
                userVideo.srcObject = null; userVideo.src = URL.createObjectURL(f); userVideo.muted = false; userVideo.load();
                document.getElementById('downloadRecBtn').disabled = false; document.getElementById('uploadRecBtn').disabled = false;
                showMessage('本地视频已加载，可用于对比/裁剪', 'success', 2000);
                // open crop panel optionally
                setTimeout(()=> openCropPanel(), 200);
            });
        }

        // ---------- misc controls ----------
        function initMiscControls(){
            document.querySelectorAll('.speed-buttons .btn').forEach(b => b.addEventListener('click', (e)=> {
                const s = parseFloat(b.dataset.speed || 1.0);
                originalVideo.playbackRate = s; userVideo.playbackRate = s;
                document.querySelectorAll('.speed-buttons .btn').forEach(x=>x.classList.remove('active'));
                b.classList.add('active');
                showMessage('播放速度: ' + s + 'x', 'success', 1200);
            }));
            document.getElementById('mirrorOriginal').addEventListener('click', ()=> toggleMirror('original'));
            document.getElementById('mirrorUser').addEventListener('click', ()=> toggleMirror('user'));
            document.getElementById('setA').addEventListener('click', ()=> { pointA = originalVideo.currentTime; updateABInfo(); showMessage('A 点已设置: '+Utils.formatTime(pointA),'success'); });
            document.getElementById('setB').addEventListener('click', ()=> { pointB = originalVideo.currentTime; updateABInfo(); showMessage('B 点已设置: '+Utils.formatTime(pointB),'success'); });
            document.getElementById('startLoop').addEventListener('click', startABLoop);
            document.getElementById('clearLoop').addEventListener('click', clearABLoop);
        }

        function toggleMirror(target){
            const v = target==='original' ? originalVideo : userVideo;
            v.classList.toggle('mirrored');
            showMessage((target==='original'?'原视频':'录制视频') + (v.classList.contains('mirrored') ? ' 镜像: 开启' : ' 镜像: 关闭'), 'success', 1200);
        }

        function startABLoop(){
            if (pointA===null || pointB===null) { showMessage('请先设置 A/B 点','error'); return; }
            if (pointA >= pointB) { showMessage('A 必须小于 B','error'); return; }
            originalVideo.currentTime = pointA; originalVideo.play();
            originalVideo.removeEventListener('timeupdate', handleABLoop); originalVideo.addEventListener('timeupdate', handleABLoop);
            showMessage('AB 循环已开始', 'success', 1200);
        }
        function handleABLoop(){ if (originalVideo.currentTime >= pointB) originalVideo.currentTime = pointA; }
        function clearABLoop(){ pointA = pointB = null; originalVideo.removeEventListener('timeupdate', handleABLoop); updateABInfo(); showMessage('已清除 AB 循环','success',1000); }
        function updateABInfo(){ document.getElementById('abInfo').textContent = 'A: ' + (pointA!==null?Utils.formatTime(pointA):'未设置') + ' | B: ' + (pointB!==null?Utils.formatTime(pointB):'未设置'); }

        // keyboard shortcuts
        document.addEventListener('keydown', (e)=>{
            if (e.target.tagName==='INPUT' || e.target.tagName==='TEXTAREA') return;
            switch(e.code){
                case 'Space': e.preventDefault(); if (originalVideo.paused) originalVideo.play(); else originalVideo.pause(); break;
                case 'ArrowLeft': e.preventDefault(); originalVideo.currentTime = Math.max(0, originalVideo.currentTime - 5); break;
                case 'ArrowRight': e.preventDefault(); originalVideo.currentTime = Math.min(originalVideo.duration || 0, originalVideo.currentTime + 5); break;
                case 'KeyM': toggleMirror('original'); break;
                case 'KeyA': setPointA(); break;
                case 'KeyB': setPointB(); break;
                case 'KeyL': startABLoop(); break;
            }
        });

        // ---------- cropper (canvas-based, exports PNG frame) ----------
        class VideoCropper {
            constructor(videoEl, canvasEl){
                this.video = videoEl;
                this.canvas = canvasEl;
                this.ctx = canvasEl.getContext('2d');
                this.crop = null;
                this.raf = null;
            }
            init(){
                // fit canvas internal size to displayed width while keeping aspect
                this.resizeCanvas();
                window.addEventListener('resize', ()=> this.resizeCanvas());
                this.initRatioButtons();
                this.drawLoop();
            }
            resizeCanvas(){
                // keep internal resolution reasonably large for quality
                const rect = this.canvas.getBoundingClientRect();
                const dpr = Math.min(window.devicePixelRatio || 1, 2);
                this.canvas.width = Math.max(320, Math.round(rect.width * dpr));
                this.canvas.height = Math.max(180, Math.round(this.canvas.width * 9 / 16)); // default 16:9
                if (!this.crop) this.setRatio('16:9');
            }
            initRatioButtons(){
                document.querySelectorAll('.ratio-btn').forEach(b => b.addEventListener('click', (e)=>{
                    document.querySelectorAll('.ratio-btn').forEach(x=>x.classList.remove('active'));
                    b.classList.add('active');
                    this.setRatio(b.dataset.ratio);
                }));
            }
            setRatio(r){
                const [rw, rh] = r==='custom' ? [16,9] : r.split(':').map(Number);
                const w = this.canvas.width, h = this.canvas.height;
                const scale = Math.min(w / rw, h / rh);
                const cw = Math.round(rw * scale), ch = Math.round(rh * scale);
                this.crop = { x: Math.round((w - cw)/2), y: Math.round((h - ch)/2), w: cw, h: ch };
            }
            drawLoop(){
                if (this.video && this.video.readyState >= 2) {
                    this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);
                    // draw video scaled to canvas
                    this.ctx.drawImage(this.video, 0, 0, this.canvas.width, this.canvas.height);
                    if (this.crop) {
                        this.ctx.strokeStyle = '#00bfff'; this.ctx.lineWidth = Math.max(2, this.canvas.width * 0.002);
                        this.ctx.strokeRect(this.crop.x, this.crop.y, this.crop.w, this.crop.h);
                        this.ctx.fillStyle = 'rgba(0,191,255,0.06)';
                        this.ctx.fillRect(this.crop.x, this.crop.y, this.crop.w, this.crop.h);
                    }
                }
                this.raf = requestAnimationFrame(()=> this.drawLoop());
            }
            async exportCroppedImageBlob(){
                if (!this.crop) return null;
                const tmp = document.createElement('canvas');
                tmp.width = this.crop.w; tmp.height = this.crop.h;
                tmp.getContext('2d').drawImage(this.canvas, this.crop.x, this.crop.y, this.crop.w, this.crop.h, 0, 0, this.crop.w, this.crop.h);
                return new Promise(resolve => tmp.toBlob(resolve, 'image/png'));
            }
            destroy(){ cancelAnimationFrame(this.raf); window.removeEventListener('resize', ()=>{}); }
        }

        function openCropPanel(){
            cropPanel.classList.remove('hidden'); cropPanel.setAttribute('aria-hidden','false');
            // ensure video shown in userVideo is playing for frame capture
            userVideo.pause(); userVideo.currentTime = Math.min(userVideo.duration || 0, 0);
            setTimeout(()=> {
                userVideo.play().catch(()=>{});
                if (activeCropper) activeCropper.destroy();
                activeCropper = new VideoCropper(userVideo, cropCanvas);
                activeCropper.init();
            }, 200);
        }

        document.getElementById('applyCropBtn').addEventListener('click', async ()=>{
            if (!activeCropper) return;
            const blob = await activeCropper.exportCroppedImageBlob();
            if (!blob) { showMessage('裁剪失败','error'); return; }
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a'); a.href = url; a.download = 'crop_' + Date.now() + '.png'; document.body.appendChild(a); a.click(); a.remove();
            URL.revokeObjectURL(url);
            showMessage('裁剪已保存（PNG）。如需导出视频请请求集成 ffmpeg.wasm。', 'success', 3000);
            closeCropPanel();
        });

        document.getElementById('cancelCropBtn').addEventListener('click', ()=> closeCropPanel());
        document.getElementById('cropClose').addEventListener('click', ()=> closeCropPanel());

        function closeCropPanel(){
            cropPanel.classList.add('hidden'); cropPanel.setAttribute('aria-hidden','true');
            if (activeCropper) { activeCropper.destroy(); activeCropper = null; }
            try { userVideo.pause(); } catch(e){}
        }

        // ---------- keyboard and misc ----------
        function setPointA(){ pointA = originalVideo.currentTime; updateABInfo(); showMessage('A 点已设置: '+Utils.formatTime(pointA),'success'); }
        function setPointB(){ pointB = originalVideo.currentTime; updateABInfo(); showMessage('B 点已设置: '+Utils.formatTime(pointB),'success'); }
        function updateABInfo(){ document.getElementById('abInfo').textContent = 'A: ' + (pointA!==null?Utils.formatTime(pointA):'未设置') + ' | B: ' + (pointB!==null?Utils.formatTime(pointB):'未设置'); }

        // Lightweight helper to load ffmpeg.wasm (CDN) and run a crop+transcode command.
        // Usage:
        //   await ensureFFmpeg();
        //   const outBlob = await cropAndTranscode(recordedBlob, {x,y,w,h}, { format: 'mp4', onProgress: p => console.log(p) });

        async function loadScript(url) {
            return new Promise((resolve, reject) => {
                const s = document.createElement('script');
                s.src = url;
                s.onload = resolve;
                s.onerror = reject;
                document.head.appendChild(s);
            });
        }

        let _ffmpeg = null;
        let _ffmpegLoaded = false;

        async function ensureFFmpeg({ log=false } = {}) {
            if (window.createFFmpeg && window.fetchFile) {
                // bundle already loaded via other script
            } else {
                // load distribution from unpkg (pin version as needed)
                await loadScript('https://unpkg.com/@ffmpeg/ffmpeg@0.11.7/dist/ffmpeg.min.js');
            }

            if (!_ffmpeg) {
                const { createFFmpeg, fetchFile } = FFmpeg; // global provided by ffmpeg.min.js
                _ffmpeg = createFFmpeg({ log: !!log, corePath: 'https://unpkg.com/@ffmpeg/core@0.11.1/dist/ffmpeg-core.js' });
            }

            if (!_ffmpegLoaded) {
                await _ffmpeg.load(); // 下载 wasm core 等，可能几十 MB，耗时
                _ffmpegLoaded = true;
            }

            return _ffmpeg;
        }

        /**
         * Crop + transcode input Blob using ffmpeg.wasm.
         * @param {Blob} inputBlob  原始视频 Blob (webm/mp4...)
         * @param {{x:number,y:number,w:number,h:number}} crop  裁剪区域（像素，基于 canvas 内部像素尺寸）
         * @param {{format?:'mp4'|'webm', onProgress?:(ratio)=>void}} opts
         * @returns {Blob} 转码后的 Blob
         */
        async function cropAndTranscode(inputBlob, crop, opts = {}) {
            const ffmpeg = await ensureFFmpeg({ log: false });
            const { fetchFile } = FFmpeg;
            const format = opts.format || 'mp4';
            const inputName = 'in.webm';
            const outputName = format === 'mp4' ? 'out.mp4' : 'out.webm';

            if (typeof opts.onProgress === 'function') {
                ffmpeg.setProgress(({ ratio }) => {
                    try { opts.onProgress(Math.min(1, Math.max(0, ratio))); } catch(e){ console.warn(e); }
                });
            }

            // write input file (fetchFile converts Blob->Uint8Array)
            ffmpeg.FS('writeFile', inputName, await fetchFile(inputBlob));

            // build crop filter string
            const vf = `crop=${crop.w}:${crop.h}:${crop.x}:${crop.y}`;

            // choose codec args (keep reasonable defaults)
            const codecArgs = format === 'mp4'
                ? ['-c:v','libx264','-preset','veryfast','-crf','23','-c:a','aac','-b:a','128k']
                : ['-c:v','libvpx-vp9','-b:v','1M','-c:a','libvorbis'];

            // run ffmpeg: input -> crop -> encode
            // Note: this can be extended for scaling, fps, filters etc.
            const args = ['-i', inputName, '-vf', vf, ...codecArgs, outputName];

            // Run ffmpeg (may take long on large videos and is CPU/memory heavy)
            await ffmpeg.run(...args);

            // read result
            const data = ffmpeg.FS('readFile', outputName);
            const outBlob = new Blob([data.buffer], { type: format === 'mp4' ? 'video/mp4' : 'video/webm' });

            // cleanup to free wasm FS
            try {
                ffmpeg.FS('unlink', inputName);
                ffmpeg.FS('unlink', outputName);
            } catch (e) {}

            return outBlob;
        }

        // export helpers to global for easy use in page scripts
        window.FFmpegWASM = { ensureFFmpeg, cropAndTranscode };
    </script>
</body>
</html>